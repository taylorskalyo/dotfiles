# Colored man pages
cman() {
    env \
    LESS_TERMCAP_mb=$'\E[01;31m' \
    LESS_TERMCAP_md=$'\E[01;38;5;74m' \
    LESS_TERMCAP_me=$'\E[0m' \
    LESS_TERMCAP_se=$'\E[0m' \
    LESS_TERMCAP_so=$'\E[38;5;246m' \
    LESS_TERMCAP_ue=$'\E[0m' \
    LESS_TERMCAP_us=$'\E[04;38;5;146m' \
    man "$@"
}
alias man='cman'

# Open a screen session with the specified name on the specified server
# Prepend user to avoid naming conflicts with other users
# Change escape key to 'j' to avoid conflicts with local terminal multiplexer
ses() {
  ssh "$1" -t "screen -e^Jj -DR ${USER}-$2"
}

# Find the next open port
getport() {
  for port in $(seq 32768 65000); do
    lsof -i -n -P |grep LISTEN |grep -q ":${port}"
    [ $? -eq 1 ] && break
  done
  echo "${port}"
}

# Log in to CG database
cgdb() {
  client="${CLIENT:-mysql}"
  env="${RAILS_ENV:-development}"
  config="${CGDIR}/config/database.yml"
  read host user pass <<<$(ruby -ryaml -e "puts YAML::load_file('${config}')['${env}'].values_at('host', 'username', 'password').join(' ')")

  if [ ! -z $TUNNEL ]; then
    # Tunnel through remote host
    sock="${client}-sock-$(date +%s)" # Append the time to reduce collisions
    port=$(getport)
    ssh -M -S "${sock}" -f -L "${port}":"${host}":3306 "${TUNNEL}" -N
    "${client}" -h127.0.0.1 -u"${user}" -p"${pass}" -P"${port}" "$@"
    ssh -S "${sock}" -O exit "${TUNNEL}"
  else
    # Open direct connection
    "${client}" -h"${host}" -u"${user}" -p"${pass}" "$@"
  fi
}

# SSH into the cg vagrant box and execute a command
cgvagrant() {
  cd "${CGDIR}" && vagrant ssh -c "cd codeguard; $@"
}
